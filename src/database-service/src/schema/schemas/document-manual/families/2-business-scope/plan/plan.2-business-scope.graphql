# Family 2: Business & Scope - Plan Document Type

# =============================================================================
# SECTION 2.1: OVERVIEW - PLAN TYPES
# =============================================================================

type _Section_2_1_Overview_Plan_ implements _Section_2_1_Overview_ {
  id: ID!
  family: _Family_2_BusinessScope_Plan_! @hasInverse(field: overview)
}

# =============================================================================
# SECTION 2.2: BUSINESS CONTEXT - PLAN TYPES
# =============================================================================

type _Section_2_2_BusinessContext_Plan_ implements _Section_2_2_BusinessContext_ {
  id: ID!
  family: _Family_2_BusinessScope_Plan_! @hasInverse(field: businessContext)
}

type _Section_2_2_1_UserPersona_Plan_ implements _Section_2_2_1_UserPersona_ {
  id: ID!

  # User personas with plan-specific relationship
  personas: [_SectionData_UserPersona_!]!
  family: _Family_2_BusinessScope_Plan_! @hasInverse(field: userPersonas)
}

type _Section_2_2_2_BusinessRule_Plan_ implements _Section_2_2_2_BusinessRule_ {
  id: ID!

  # Core business rules with plan-specific relationship
  coreBusinessRules: [_SectionData_BusinessRule_!]!
  family: _Family_2_BusinessScope_Plan_! @hasInverse(field: coreBusinessRules)
}

type _Section_2_2_3_UserStory_Plan_ implements _Section_2_2_3_UserStory_ {
  id: ID!

  # User stories with plan-specific relationship
  userStories: [_SectionData_UserStory_!]!
  family: _Family_2_BusinessScope_Plan_! @hasInverse(field: userStories)
}

type _Section_2_2_4_UserJourney_Plan_ implements _Section_2_2_4_UserJourney_ {
  id: ID!

  # User journeys with plan-specific relationship
  userJourneys: [_SectionData_UserJourney_!]!
  family: _Family_2_BusinessScope_Plan_! @hasInverse(field: userJourneys)
}

# =============================================================================
# SECTION 2.3: SUCCESS CRITERIA - PLAN TYPES
# =============================================================================

type _Section_2_3_SuccessCriteria_Plan_ implements _Section_2_3_SuccessCriteria_ {
  id: ID!
  family: _Family_2_BusinessScope_Plan_! @hasInverse(field: successCriteria)

  # Success criteria with plan-specific relationship
  criteria: [_Section_2_3_1_SuccessCriterion_Plan_!]! @hasInverse(field: successCriteria)
}

type _Section_2_3_1_SuccessCriterion_Plan_ implements _Section_2_3_1_SuccessCriterion_ {
  id: String!

  successCriteria: _Section_2_3_SuccessCriteria_Plan_! @hasInverse(field: criteria)
}

# =============================================================================
# SECTION 2.5: BOUNDARIES & SCOPE - PLAN TYPES
# =============================================================================

type _Section_2_5_BoundariesScope_Plan_ implements _Section_2_5_BoundariesScope_ {
  id: ID!
  family: _Family_2_BusinessScope_Plan_! @hasInverse(field: boundariesScope)

  # In scope items with plan-specific relationship
  inScope: [_SectionData_Scope_Item_Plan_!]! @hasInverse(field: boundariesScope)

  # Out of scope items with plan-specific relationship
  outOfScope: [_SectionData_Scope_Item_Plan_!]! @hasInverse(field: boundariesScope)
}

type _SectionData_Scope_Item_Plan_ implements _SectionData_Scope_Item_ {
  id: ID!

  boundariesScope: _Section_2_5_BoundariesScope_Plan_! @hasInverse(field: inScope)
}

# =============================================================================
# SECTION 2.6: CORE BUSINESS PROCESSES - PLAN TYPES
# =============================================================================

type _Section_2_6_CoreBusinessProcesses_Plan_ implements _Section_2_6_CoreBusinessProcesses_ {
  id: ID!
  family: _Family_2_BusinessScope_Plan_! @hasInverse(field: coreBusinessProcesses)

  # Core business processes with plan-specific relationship
  processes: [_Section_2_6_1_BusinessProcess_Plan_!]! @hasInverse(field: coreBusinessProcesses)
}

type _Section_2_6_1_BusinessProcess_Plan_ implements _SectionData_BusinessProcess_ {
  id: String!
  
  steps: [_SectionData_ProcessStep_!]!
  
  coreBusinessProcesses: _Section_2_6_CoreBusinessProcesses_Plan_! @hasInverse(field: processes)
}


# =============================================================================
# PLAN FAMILY IMPLEMENTATION
# =============================================================================

type _Family_2_BusinessScope_Plan_ implements _Family_2_BusinessScope_ {
  id: ID!

  # Composed directly from atomic sections
  overview: _Section_2_1_Overview_Plan_! @hasInverse(field: family)
  
  businessContext: _Section_2_2_BusinessContext_Plan_! @hasInverse(field: businessContext)
  userPersonas: _Section_2_2_1_UserPersona_Plan_! @hasInverse(field: family)
  coreBusinessRules: _Section_2_2_2_BusinessRule_Plan_! @hasInverse(field: family)
  userStories: _Section_2_2_3_UserStory_Plan_! @hasInverse(field: family)
  userJourneys: _Section_2_2_4_UserJourney_Plan_! @hasInverse(field: family)
  
  successCriteria: _Section_2_3_SuccessCriteria_Plan_! @hasInverse(field: family)
  boundariesScope: _Section_2_5_BoundariesScope_Plan_! @hasInverse(field: family)
  coreBusinessProcesses: _Section_2_6_CoreBusinessProcesses_Plan_! @hasInverse(field: family)

  document: _Document_Plan_! @hasInverse(field: businessScope)
}
